/******************************************************************************
Implementation of tree

*******************************************************************************/
#include <iostream>
#include<queue>
#include<algorithm>
using namespace std;
class node{
    public:
    int data;
    node*left;
    node*right;
    node(int Data){
        this->data=Data;
        this->left=NULL;
        this->right=NULL;
    }
};

node*levelOrderTraversal(node*root){
    //
    queue<node*>q;
    q.push(root);
    
    while(!q.empty())
    {
        
        node*temp=q.front();
        cout<<temp->data<<" ";
        q.pop();
        
        if(temp->left){
            q.push(temp->left);
            
        }
        
        
        if(temp->right){
            q.push(temp->right);
            
        }
        
    }
}

//creation of tree

node* buildTree(node*root){
    int data;
    
    cout<<"Enter data";
    
    cin>>data;
    
    root = new node(data);
    if(data==-1){
        return NULL;
        
    }
    
    cout<<"enter left part of data   "<< data<<endl;
    root->left=buildTree(root->left);
    cout<<"enter right part of data "<<data<<endl;
    root->right=buildTree(root->right);
    return root;
}

void reverseLevelOrderTraversal(node*root){
    vector<int>ans;
    if(!root) return;
    
    queue<node*>q;
    q.push(root);
    while(!q.empty()){
        node*t=q.front();
        ans.push_back(t->data);
        if(t->right) q.push(t->right);
        if(t->left)q.push(t->left);
        q.pop();
    }
    
    reverse(ans.begin(),ans.end());
    for(int i=0;i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    
}

//inorder traversal
void inorder_traversal(node*root){
    if(root==NULL){
        return;
    }
    
    //left sub tree
    inorder_traversal(root->left);
    cout<<root->data<<" ";
    inorder_traversal(root->right);
    
}


//preorder traversal
void preorder_traversal(node*root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder_traversal(root->left);
    
    preorder_traversal(root->right);
    
}

//postorder_traversal
void postorder_traversal(node*root){
    if(root==NULL){
        return;
    }
    
    postorder_traversal(root->left);
    
    postorder_traversal(root->right);
    cout<<root->data<<" ";
    
}

int main()
{
    
    
    node *root=NULL;
    root =buildTree(root);
    reverseLevelOrderTraversal(root);
    cout<<endl<<" inorder traversal "<<endl;
    
    inorder_traversal(root);
    
    cout<<endl<<"preorder_traversal"<<endl;
    preorder_traversal(root);
    // cout<<"level order traversal"<<endl;
    // levelOrderTraversal(root);
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
    
     cout<<endl<<"postorder_traversal"<<endl;
    postorder_traversal(root);
    
    

    return 0;
}
